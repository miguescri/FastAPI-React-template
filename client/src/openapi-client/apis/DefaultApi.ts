/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    Item,
    ItemFromJSON,
    ItemToJSON,
    ItemNew,
    ItemNewFromJSON,
    ItemNewToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserNew,
    UserNewFromJSON,
    UserNewToJSON,
} from '../models';

export interface AddItemItemsPostRequest {
    itemNew: ItemNew;
}

export interface AddUserUserPostRequest {
    userNew: UserNew;
}

export interface GetItemByIdItemsItemIdGetRequest {
    itemId: string;
}

export interface LoginForAccessTokenTokenPostRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Add a new item to the system and marks it as owned by the current user. Requires authentication
     * Add Item
     */
    async addItemItemsPostRaw(requestParameters: AddItemItemsPostRequest): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.itemNew === null || requestParameters.itemNew === undefined) {
            throw new runtime.RequiredError('itemNew','Required parameter requestParameters.itemNew was null or undefined when calling addItemItemsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2PasswordBearer", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemNewToJSON(requestParameters.itemNew),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Add a new item to the system and marks it as owned by the current user. Requires authentication
     * Add Item
     */
    async addItemItemsPost(requestParameters: AddItemItemsPostRequest): Promise<Item> {
        const response = await this.addItemItemsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add a user to the system for authentication
     * Add User
     */
    async addUserUserPostRaw(requestParameters: AddUserUserPostRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userNew === null || requestParameters.userNew === undefined) {
            throw new runtime.RequiredError('userNew','Required parameter requestParameters.userNew was null or undefined when calling addUserUserPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserNewToJSON(requestParameters.userNew),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Add a user to the system for authentication
     * Add User
     */
    async addUserUserPost(requestParameters: AddUserUserPostRequest): Promise<User> {
        const response = await this.addUserUserPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve an item given its ID
     * Get Item By Id
     */
    async getItemByIdItemsItemIdGetRaw(requestParameters: GetItemByIdItemsItemIdGetRequest): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemByIdItemsItemIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items/{item_id}`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Retrieve an item given its ID
     * Get Item By Id
     */
    async getItemByIdItemsItemIdGet(requestParameters: GetItemByIdItemsItemIdGetRequest): Promise<Item> {
        const response = await this.getItemByIdItemsItemIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a list of all the items in the system
     * Get Items
     */
    async getItemsItemsGetRaw(): Promise<runtime.ApiResponse<Array<Item>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     * Retrieve a list of all the items in the system
     * Get Items
     */
    async getItemsItemsGet(): Promise<Array<Item>> {
        const response = await this.getItemsItemsGetRaw();
        return await response.value();
    }

    /**
     * Retrieve info from the currently logged user. Requires authentication.
     * Get User
     */
    async getUserUserGetRaw(): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2PasswordBearer", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Retrieve info from the currently logged user. Requires authentication.
     * Get User
     */
    async getUserUserGet(): Promise<User> {
        const response = await this.getUserUserGetRaw();
        return await response.value();
    }

    /**
     * Process a OAuth2 request for authentication and returns a JWT token if it is successful. The request must contain at least the fields username and password.  If the provided information isn\'t valid, returns a 401 UNAUTHORIZED error.
     * Login For Access Token
     */
    async loginForAccessTokenTokenPostRaw(requestParameters: LoginForAccessTokenTokenPostRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling loginForAccessTokenTokenPost.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginForAccessTokenTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Process a OAuth2 request for authentication and returns a JWT token if it is successful. The request must contain at least the fields username and password.  If the provided information isn\'t valid, returns a 401 UNAUTHORIZED error.
     * Login For Access Token
     */
    async loginForAccessTokenTokenPost(requestParameters: LoginForAccessTokenTokenPostRequest): Promise<Token> {
        const response = await this.loginForAccessTokenTokenPostRaw(requestParameters);
        return await response.value();
    }

}
